{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendLink","link","commentGrabber","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data1","data2","data3","toSend","wrap","_context","prev","next","fetch","sent","json","console","log","data","children","filter","comment","body","includes","map","hit","JSON","stringify","doSomething","t0","stop","_x","apply","arguments","sentData","links","toString","match","setState","comments","renderList","threads","length","react_default","createElement","key","created_utc","href","url","target","title","className","state","redditData","defaultQuery","text","loading","_this2","then","response","content","game","link_flair_text","d","Date","onClick","window","open","getDay","getMonth","getDate","Component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAsKeA,qBA9Jb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA2CRQ,SAAW,SAAAC,GACTR,EAAKS,eAAeD,IA7CHR,EAgDnBS,eAhDmB,eAAAC,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KAgDF,SAAAC,EAAMP,GAAN,IAAAQ,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEOC,MAAMhB,GAFb,cAEPQ,EAFOK,EAAAI,KAAAJ,EAAAE,KAAA,EAGOP,EAAMU,OAHb,cAGPT,EAHOI,EAAAI,KAAAJ,EAAAE,KAAA,EAKXI,QAAQC,IAAI,cAAeX,GACTA,EAAM,GAAGY,KAAKC,SACGC,OAAO,SAAAC,GAAO,OAC/CA,EAAQH,KAAKI,KAAKC,SAAS,UAELC,IAAI,SAAAC,GAAG,OAAIA,EAAIP,KAAKI,OAVjC,OAIPf,EAJOG,EAAAI,KAaTN,EAASkB,KAAKC,UAAUpB,GAC5BlB,EAAKuC,YAAYpB,GAdJE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,SAgBbM,QAAQC,IAARP,EAAAmB,IAhBa,yBAAAnB,EAAAoB,SAAA1B,EAAA,kBAhDE,gBAAA2B,GAAA,OAAAhC,EAAAiC,MAAAxC,KAAAyC,YAAA,GAAA5C,EAoEnBuC,YAAc,SAAAM,GAEZ,IACIC,EADeD,EAASE,WACHC,MAAM,sBAE/BhD,EAAKiD,SAAS,CAAEC,SAAUJ,EAAMC,cAzEf/C,EA4EnBmD,WAAa,SAAAC,GAEX,OAAuB,IAAnBA,EAAQC,OAERC,EAAAzC,EAAA0C,cAAA,UACG,IACDD,EAAAzC,EAAA0C,cAAA,gDAA6C,KAI1CH,EAAQjB,IAAI,SAAAC,GAAG,OACpBkB,EAAAzC,EAAA0C,cAAA,MAAIC,IAAKpB,EAAIP,KAAK4B,aAChBH,EAAAzC,EAAA0C,cAAA,KAAGG,KAAMtB,EAAIP,KAAK8B,IAAKC,OAAO,UAC3BxB,EAAIP,KAAKgC,OAGZP,EAAAzC,EAAA0C,cAAA,OAAKO,UAAU,aAAa9D,EAAK+D,MAAMb,UACtClD,EAAKO,SAAS6B,EAAIP,KAAK8B,IAAM,aA1FpC3D,EAAK+D,MAAQ,CACXC,WAAY,GACZC,aAAc,QACdC,KAAM,GACNC,SAAS,EACTjB,SAAU,IARKlD,mFAYC,IAAAoE,EAAAjE,KAClBqB,MAhBQ,4CAiBL6C,KAAK,SAAAC,GAAQ,OAAIA,EAAS5C,SAC1B2C,KAAK,SAAAxC,GAAI,OACRuC,EAAKnB,SAAS,CAAEe,WAAYnC,EAAKA,KAAKC,SAAUqC,SAAS,uCAoF7D,IA4BII,EA5BEnB,EAAUjD,KAAK4D,MAAMC,WAAWjC,OACpC,SAAAyC,GAAI,MAAkC,gBAA9BA,EAAK3C,KAAK4C,kBAGhBC,EAAI,IAAIC,KAkDZ,OAhBEJ,EATGpE,KAAK4D,MAAMI,QAUZb,EAAAzC,EAAA0C,cAAA,WACED,EAAAzC,EAAA0C,cAAA,WACAD,EAAAzC,EAAA0C,cAAA,MACEqB,QAAS,kBAAMC,OAAOC,KAAK,6BAC3BhB,UAAU,WAET,IAJH,iBAtBK,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAoB0BY,EAAEK,UALxB,KApCO,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YA6BgDL,EAAEM,YAAa,IACxDN,EAAEO,WAEL3B,EAAAzC,EAAA0C,cAAA,MAAIO,UAAU,UAAU3D,KAAKgD,WAAWC,IACxCE,EAAAzC,EAAA0C,cAAA,iBAnBFD,EAAAzC,EAAA0C,cAAA,OAAKO,UAAU,WACbR,EAAAzC,EAAA0C,cAAA,WACAD,EAAAzC,EAAA0C,cAAA,WACAD,EAAAzC,EAAA0C,cAAA,kCAoBCD,EAAAzC,EAAA0C,cAAA,WAAMgB,UA3JCW,cCKEC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASrC,MACvB,2DCZNsC,IAASC,OAAOjC,EAAAzC,EAAA0C,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.79507a0f.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport { Component } from \"react\";\n\nconst API = \"https://www.reddit.com/r/nflstreams.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redditData: [],\n      defaultQuery: \"redux\",\n      text: \"\",\n      loading: false,\n      comments: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data =>\n        this.setState({ redditData: data.data.children, loading: true })\n      );\n  }\n  /*\n  commentGrabber = link => {\n    fetch(link)\n      .then(response => response.json())\n      .then(response => {\n        //console.log(response[1])\n        let commentsArr = response[1].data.children;\n        console.log(commentsArr);\n        let filteredComments = commentsArr.filter(comment =>\n          comment.data.body.includes(\"http\")\n        );\n        console.log(filteredComments);\n        //from here, you'll just grab the replies\n        //possibly do a filter to find out if theres links in the body\n        //then return in the fetch link\n        let theArr = [];\n        return filteredComments.map(hit =>\n          //<div>{JSON.stringify(hit.data.body)} </div>\n          //LAST WORKED OVER HERE\n          console.log(hit.data.body)\n        );\n      });\n    //bring it back with a return statement\n  };\n*/\n  sendLink = link => {\n    this.commentGrabber(link);\n  };\n\n  commentGrabber = async link => {\n    try {\n      const data1 = await fetch(link);\n      const data2 = await data1.json();\n      const data3 = await (function() {\n        console.log(\"this is the\", data2);\n        let commentsArr = data2[1].data.children;\n        let filteredComments = commentsArr.filter(comment =>\n          comment.data.body.includes(\"http\")\n        );\n        return filteredComments.map(hit => hit.data.body);\n      })();\n      //console.log(data3);\n      let toSend = JSON.stringify(data3);\n      this.doSomething(toSend);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  doSomething = sentData => {\n    //console.log(sentData);\n    let createString = sentData.toString();\n    let links = createString.match(/\\bhttps?:\\/\\/\\S+/gi);\n    //console.log(links);\n    this.setState({ comments: links.toString() });\n  };\n\n  renderList = threads => {\n    debugger;\n    if (threads.length === 0) {\n      return (\n        <li>\n          {\" \"}\n          <div> No NFL games going on right now </div>{\" \"}\n        </li>\n      );\n    } else {\n      return threads.map(hit => (\n        <li key={hit.data.created_utc}>\n          <a href={hit.data.url} target=\"_blank\">\n            {hit.data.title}\n          </a>\n\n          <div className=\"italicize\">{this.state.comments}</div>\n          {this.sendLink(hit.data.url + \".json\")}\n        </li>\n      ));\n    }\n  };\n\n  render() {\n    const threads = this.state.redditData.filter(\n      game => game.data.link_flair_text === \"Game Thread\"\n    );\n\n    let d = new Date();\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    let content;\n    if (!this.state.loading) {\n      content = (\n        <div className=\"loading\">\n          <br />\n          <br />\n          <h1> finding NFL games </h1>\n        </div>\n      );\n    } else {\n      content = (\n        <div>\n          <br />\n          <h2\n            onClick={() => window.open(\"https://campusstreams.ga\")}\n            className=\"weather\"\n          >\n            {\" \"}\n            NFL Games for {days[d.getDay()]}, {months[d.getMonth()]}{\" \"}\n            {d.getDate()}\n          </h2>\n          <ol className=\"center\">{this.renderList(threads)}</ol>\n          <div> </div>\n        </div>\n      );\n    }\n    return <div>{content}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}